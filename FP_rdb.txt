Фінальний проект РБД

Завдання 1, 2
Завантаження даних та нормалізація таблиць до 3 нормальної форми

USE pandemic;

-- Виділення таблиці Entities для країн та їх кодів, щоб уникнути дублювання

CREATE TABLE Entities (
    EntityID INT AUTO_INCREMENT PRIMARY KEY,
    Entity VARCHAR(255) NOT NULL,
    Code VARCHAR(10) NOT NULL
);
INSERT INTO Entities (Entity, Code)
SELECT DISTINCT Entity, Code
FROM infectious_cases;

SELECT * FROM Entities;

-- Виділення таблиці DiseaseCases, яка міститиме роки та кількість випадків захворювань для кожної сутності  

DROP TABLE IF EXISTS DiseaseCases;

CREATE TABLE DiseaseCases (
    CaseID INT AUTO_INCREMENT PRIMARY KEY,
    EntityID INT NOT NULL,
    Year YEAR NOT NULL,
    Number_yaws INT,
    polio_cases INT,
    cases_guinea_worm INT,
    Number_rabies INT,
    Number_malaria INT,
    Number_hiv INT,
    Number_tuberculosis INT,
    Number_smallpox INT,
    Number_cholera_cases INT,
    FOREIGN KEY (EntityID) REFERENCES Entities(EntityID)
);

SELECT * FROM DiseaseCases LIMIT 10;

-- Заповнення данними
INSERT INTO DiseaseCases (
    EntityID, Year, Number_yaws, polio_cases, cases_guinea_worm, 
    Number_rabies, Number_malaria, Number_hiv, 
    Number_tuberculosis, Number_smallpox, Number_cholera_cases
)
SELECT 
    e.EntityID, 
    ic.Year, 
    NULLIF(ic.Number_yaws, '') AS Number_yaws,
    NULLIF(ic.polio_cases, '') AS polio_cases,
    NULLIF(ic.cases_guinea_worm, '') AS cases_guinea_worm,
    NULLIF(ic.Number_rabies, '') AS Number_rabies,
    NULLIF(ic.Number_malaria, '') AS Number_malaria,
    NULLIF(ic.Number_hiv, '') AS Number_hiv,
    NULLIF(ic.Number_tuberculosis, '') AS Number_tuberculosis,
    NULLIF(ic.Number_smallpox, '') AS Number_smallpox,
    NULLIF(ic.Number_cholera_cases, '') AS Number_cholera_cases
FROM infectious_cases ic
JOIN Entities e ON ic.Entity = e.Entity;

-- Перевірка даних
SELECT e.Entity, e.Code, dc.Year, dc.Number_rabies
FROM DiseaseCases dc
JOIN Entities e ON dc.EntityID = e.EntityID;

SELECT Entity, COUNT(*) 
FROM Entities 
GROUP BY Entity;

Завдання 3
Аналіз даних

-- Використовуємо таблиці DiseaseCases і Entities. Для кожного Entity та Code виконаємо агрегуючі функції (AVG, MIN, MAX, SUM) для атрибута Number_rabies

SELECT 
    e.Entity AS Entity,
    e.Code AS Code,
    AVG(dc.Number_rabies) AS Avg_Number_rabies,
    MIN(dc.Number_rabies) AS Min_Number_rabies,
    MAX(dc.Number_rabies) AS Max_Number_rabies,
    SUM(dc.Number_rabies) AS Sum_Number_rabies
FROM DiseaseCases dc
JOIN Entities e ON dc.EntityID = e.EntityID
WHERE dc.Number_rabies IS NOT NULL
GROUP BY e.Entity, e.Code
ORDER BY Avg_Number_rabies DESC
LIMIT 10;

Завдання 4
Різниця в роках
SELECT 
    `Year`, 
    STR_TO_DATE(CONCAT(`Year`, '-01-01'), '%Y-%m-%d') AS Date_1st_Jan,
    CURDATE() AS `Current_Date`,
    TIMESTAMPDIFF(YEAR, STR_TO_DATE(CONCAT(`Year`, '-01-01'), '%Y-%m-%d'), CURDATE()) AS Year_Difference
FROM DiseaseCases
LIMIT 10;

Завдання 5
Створення функцій

-- Створюємо функцію, яка прийматиме рік і повертатиме різницю в роках між поточною датою та 1 січня цього року

DELIMITER //

CREATE FUNCTION YearDifference(inputYear INT)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE firstJanDate DATE;
    DECLARE yearDifference INT;

    SET firstJanDate = STR_TO_DATE(CONCAT(inputYear, '-01-01'), '%Y-%m-%d');
    SET yearDifference = TIMESTAMPDIFF(YEAR, firstJanDate, CURDATE());
    RETURN yearDifference;
END //

DELIMITER ;
SELECT YearDifference(1996) AS Difference;

-- Функція, яка обчислює середню кількість захворювань за заданий період на основі річних даних

DELIMITER //

CREATE FUNCTION CalculatePeriodAverage(yearlyCases INT, divisor INT)
RETURNS FLOAT
DETERMINISTIC
BEGIN
    -- Перевірка на нульовий дільник, щоб уникнути помилки
    IF divisor = 0 THEN
        RETURN NULL;
    END IF;
    -- Обчислення середньої кількості захворювань
    RETURN yearlyCases / divisor;
END //

DELIMITER ;

SELECT CalculatePeriodAverage(120, 12) AS MonthlyAverage;

SELECT 
    `Year`,
    `Number_rabies`,
    CalculatePeriodAverage(`Number_rabies`, 12) AS Rabies_MonthlyAverage,
    CalculatePeriodAverage(`Number_rabies`, 4) AS Rabies_QuarterlyAverage,
    CalculatePeriodAverage(`Number_rabies`, 2) AS Rabies_HalfYearlyAverage,
    
    `Number_malaria`,
    CalculatePeriodAverage(`Number_malaria`, 12) AS Malaria_MonthlyAverage,
    CalculatePeriodAverage(`Number_malaria`, 4) AS Malaria_QuarterlyAverage,
    CalculatePeriodAverage(`Number_malaria`, 2) AS Malaria_HalfYearlyAverage,
    
    `Number_hiv`,
    CalculatePeriodAverage(`Number_hiv`, 12) AS HIV_MonthlyAverage,
    CalculatePeriodAverage(`Number_hiv`, 4) AS HIV_QuarterlyAverage,
    CalculatePeriodAverage(`Number_hiv`, 2) AS HIV_HalfYearlyAverage

FROM DiseaseCases
WHERE `Number_rabies` IS NOT NULL 
   OR `Number_malaria` IS NOT NULL 
   OR `Number_hiv` IS NOT NULL
LIMIT 10;



